{"version":3,"sources":["index.js"],"names":["Square","props","title","square","value","isHighlighted","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","onClick","Board","i","_this","this","key","squares","_this2","board","Array","from","length","size","_x","row","j","renderSquare","React","Component","Game","_this3","Object","D_Documents_Work_React_tic_tac_toe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","D_Documents_Work_React_tic_tac_toe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_Documents_Work_React_tic_tac_toe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","D_Documents_Work_React_tic_tac_toe_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","newGame","isHistoryAsc","currentBoard","winner","currentPlayer","newSquares","slice","winnerLine","map","x","concat","D_Documents_Work_React_tic_tac_toe_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","keys","reduce","acc","_y","find","l","forEach","setState","history","step","selectedIndex","fill","_this4","status","sortMovesTitle","movesSortCoef","moves","Math","floor","jumpTo","sort","y","movesList","reversed","sizes","Fragment","onChange","e","restart","Number","parseInt","target","handleClick","sortHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfd5a37d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    let title = props.square.value;\r\n\r\n    if (props.square.isHighlighted) {\r\n        title = <mark>{title}</mark>;\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"square\"\r\n            onClick={props.onClick}>\r\n            {title}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return <Square\r\n            key={i}\r\n            square={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)} />;\r\n    }\r\n\r\n    render() {\r\n        const board = Array.from({length: this.props.size}, (_x, i) => {\r\n            const row = Array.from({length: this.props.size}, (_x, j) => this.renderSquare(i * this.props.size + j));\r\n\r\n            return (\r\n                <div key={i} className=\"board-row\">\r\n                    {row}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {board}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ...this.newGame(3),\r\n            isHistoryAsc: true,\r\n        };\r\n    }\r\n\r\n    get currentPlayer() {\r\n        return this.state.step % 2 === 0 ? 'X' : 'O';\r\n    }\r\n\r\n    get currentBoard() {\r\n        return this.state.history[this.state.step];\r\n    }\r\n\r\n    handleClick(i) {\r\n        const board = this.currentBoard;\r\n\r\n        if (board.squares[i].value || board.winner) {\r\n            return;\r\n        }\r\n\r\n        const currentPlayer = this.currentPlayer;\r\n\r\n        const newSquares = board.squares.slice();\r\n        newSquares[i] = {...newSquares[i], value: currentPlayer};\r\n        // newSquares[i].value = currentPlayer;\r\n\r\n        const winnerLine = calculateWinnerLine(newSquares.map(x => x.value), this.state.size);\r\n\r\n        if (winnerLine) {\r\n            winnerLine.forEach(x => {\r\n                newSquares[x] = {...newSquares[x], isHighlighted: true}\r\n                // newSquares[i].isHighlighted = true;\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            history: [\r\n                ...this.state.history.slice(0, this.state.step + 1),\r\n                {\r\n                    squares: newSquares,\r\n                    selectedIndex: i,\r\n                    winner: winnerLine ? currentPlayer : null,\r\n                }],\r\n            step: this.state.step + 1,\r\n        })\r\n    }\r\n\r\n    newGame(size) {\r\n        return {\r\n            size: size,\r\n            history: [\r\n                {\r\n                    squares: Array(size * size).fill({\r\n                        value: null,\r\n                        isHighlighted: false\r\n                    }),\r\n                    selectedIndex: null,\r\n                    winner: null,\r\n                }\r\n            ],\r\n            step: 0,\r\n        };\r\n    }\r\n\r\n    restart(size) {\r\n        this.setState(this.newGame(size));\r\n    }\r\n\r\n    jumpTo(i) {\r\n        this.setState({step: i});\r\n    }\r\n\r\n    sortHistory() {\r\n        this.setState({isHistoryAsc: !this.state.isHistoryAsc})\r\n    }\r\n\r\n    render() {\r\n        const board = this.currentBoard;\r\n        const status = board.winner ? `Winner is: ${board.winner}` : this.state.step === this.state.size * this.state.size ? 'The result is a draw.' : `Next player is: ${this.currentPlayer}`;\r\n        const sortMovesTitle = `Sort moves in ${this.state.isHistoryAsc ? 'DESC' : 'ASC'} order`\r\n\r\n        const movesSortCoef = this.state.isHistoryAsc ? 1 : -1;\r\n        \r\n        const moves = this.state.history\r\n            .map((x, i) => {\r\n                let title = i ? `Go to move (${Math.floor(x.selectedIndex / this.state.size) + 1}, ${(x.selectedIndex % this.state.size) + 1})` : `Go to game start`;\r\n\r\n                if (i === this.state.step)\r\n                {\r\n                    title = (<b>{title}</b>);\r\n                }\r\n\r\n                return (\r\n                    <li key={i}>\r\n                        <button onClick={() => this.jumpTo(i)}>{title}</button>\r\n                    </li>\r\n                );\r\n            })\r\n            .sort((x, y) => (x.key - y.key) * movesSortCoef);\r\n        \r\n        // if (!this.state.isHistoryAsc) {\r\n        //     moves = moves.reverse();\r\n        // }\r\n\r\n        const movesList = this.state.isHistoryAsc ? <ol>{moves}</ol> : <ol reversed>{moves}</ol>;\r\n\r\n        const sizes = Array.from({length: 20 - 2}, (x, i) => i + 3).map(x => <option key={x} value={x}>Size {x}</option>);\r\n        \r\n        return (\r\n            <>\r\n                <div className=\"game-info\">\r\n                    <select value={this.state.size} onChange={(e) => this.restart(Number.parseInt(e.target.value))}>\r\n                        {sizes}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    &nbsp;\r\n                </div>\r\n                <div className=\"game\">\r\n                    <div className=\"game-board\">\r\n                        <Board\r\n                            squares={board.squares}\r\n                            size={this.state.size}\r\n                            onClick={(i) => this.handleClick(i)} />\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <div>{status}</div>\r\n                        <div>&nbsp;</div>\r\n                        <div>\r\n                            <button onClick={() => this.sortHistory()}>{sortMovesTitle}</button>\r\n                        </div>\r\n                        {movesList}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinnerLine(squares, size) {\r\n    const lines =\r\n    [\r\n        ...[...Array(size).keys()].reduce(\r\n            (acc, _x, i) =>\r\n                [\r\n                    ...acc,\r\n                    Array.from({length: size}, (_y, j) => size * i + j),         // by i-th row\r\n                    Array.from({length: size}, (_y, j) => i + size * j),         // by i-th column\r\n                ],\r\n            []),\r\n        Array.from({length: size}, (_y, i) => size * i + i),                     // by left-to-right diagonal\r\n        Array.from({length: size}, (_y, i) => size * i  + (size - 1 - i)),       // by right-to-left diagonal\r\n    ];\r\n\r\n    return lines.find(l => l.map(i => squares[i]).reduce((acc, x) => acc === x ? acc : null));\r\n  }"],"sourceRoot":""}